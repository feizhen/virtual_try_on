// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?   // Nullable for OAuth users (Google login)
  name          String?
  avatar        String?

  // OAuth fields
  googleId      String?   @unique @map("google_id")
  provider      String    @default("local") // "local" | "google"

  // Status flags
  isActive      Boolean   @default(true) @map("is_active")
  emailVerified Boolean   @default(false) @map("email_verified")

  // Timestamps
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")

  // Relations
  refreshTokens      RefreshToken[]
  modelPhotos        ModelPhoto[]
  clothingItems      ClothingItem[]
  outfitResults      OutfitResult[]
  processingSessions ProcessingSession[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model ModelPhoto {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  imageUrl         String    @map("image_url") // Local file path, e.g., "uploads/models/uuid.jpg"
  originalFileName String?   @map("original_file_name")
  fileSize         Int       @map("file_size")
  mimeType         String    @map("mime_type")
  width            Int
  height           Int
  uploadedAt       DateTime  @default(now()) @map("uploaded_at")
  deletedAt        DateTime? @map("deleted_at")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfitResults      OutfitResult[]
  processingSessions ProcessingSession[]

  @@index([userId])
  @@index([deletedAt])
  @@index([uploadedAt(sort: Desc)])
  @@map("model_photos")
}

model ClothingItem {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  imageUrl         String    @map("image_url") // Local file path, e.g., "uploads/clothing/uuid.jpg"
  originalFileName String?   @map("original_file_name")
  fileSize         Int       @map("file_size")
  mimeType         String    @map("mime_type")
  width            Int
  height           Int
  uploadedAt       DateTime  @default(now()) @map("uploaded_at")
  deletedAt        DateTime? @map("deleted_at")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfitResults      OutfitResult[]
  processingSessions ProcessingSession[]

  @@index([userId])
  @@index([deletedAt])
  @@index([uploadedAt(sort: Desc)])
  @@map("clothing_items")
}

model OutfitResult {
  id                 String    @id @default(uuid())
  userId             String    @map("user_id")
  modelPhotoId       String    @map("model_photo_id")
  clothingItemId     String    @map("clothing_item_id")
  resultImageUrl     String    @map("result_image_url") // Local file path, e.g., "uploads/results/uuid.jpg"
  fileSize           Int       @map("file_size")
  mimeType           String    @map("mime_type")
  width              Int
  height             Int
  processingDuration Int       @map("processing_duration") // milliseconds
  createdAt          DateTime  @default(now()) @map("created_at")
  deletedAt          DateTime? @map("deleted_at")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelPhoto         ModelPhoto          @relation(fields: [modelPhotoId], references: [id])
  clothingItem       ClothingItem        @relation(fields: [clothingItemId], references: [id])
  processingSessions ProcessingSession[]

  @@index([userId])
  @@index([modelPhotoId])
  @@index([clothingItemId])
  @@index([createdAt(sort: Desc)])
  @@index([userId, modelPhotoId, clothingItemId])
  @@map("outfit_results")
}

model ProcessingSession {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  modelPhotoId   String    @map("model_photo_id")
  clothingItemId String    @map("clothing_item_id")
  status         String    @default("pending") // "pending" | "processing" | "completed" | "failed"
  resultId       String?   @map("result_id")
  errorMessage   String?   @map("error_message")
  retryCount     Int       @default(0) @map("retry_count")
  createdAt      DateTime  @default(now()) @map("created_at")
  startedAt      DateTime? @map("started_at")
  completedAt    DateTime? @map("completed_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelPhoto   ModelPhoto    @relation(fields: [modelPhotoId], references: [id])
  clothingItem ClothingItem  @relation(fields: [clothingItemId], references: [id])
  result       OutfitResult? @relation(fields: [resultId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@index([userId, status])
  @@map("processing_sessions")
}
